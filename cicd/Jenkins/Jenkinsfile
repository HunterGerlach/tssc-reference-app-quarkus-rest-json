// Javascript Frontend Jenkinsfile
pipeline {

  // TODO Update the agent as appropriate for the actual implementation
  agent {
    kubernetes {
      label "jenkins-tssc-reference-app-quarkus-rest-json-${env.BUILD_ID}"
      cloud 'openshift'
      yaml """
apiVersion: v1
kind: Pod
spec:
  serviceAccount: jenkins
  containers:
  - name: 'jnlp'
    image: 'quay.io/redhat-cop/jenkins-agent-python:latest'
    tty: true
  - name: 'maven'
    image: 'quay.io/redhat-cop/jenkins-slave-mvn:latest'
    tty: true
    command: ['sh', '-c', 'generate_container_user && cat']
"""
            }
        }

  stages {

    stage('Setup') {
      steps {
      	sh '''
      		python -m venv tssc
      		source tssc/bin/activate
      		pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple tssc
        '''
      } // steps
    } // stage

    stage('Generate Metadata') {
      steps {
        sh '''
        	source tssc/bin/activate
        	python -m tssc -c cicd/tssc-config.yml -s generate-metadata
        '''
      } // steps
    } // stage

    stage('Tag Source Code with Metadata') {
      steps {
        sh '''
        	source tssc/bin/activate
        	python -m tssc -c cicd/tssc-config.yml -s tag-source
        '''
      } // steps
    } // stage

    stage('Static Code Analysis') {

      // If the same tool is being used for both (i.e. Sonarqube),
      // then these parallel stages can be merged.
      parallel {
        stage('Security Static Code Analysis (SonarQube)') {
          steps {
            echo '${STAGE_NAME}'
          } // steps
        } // stage

       stage('Linting Static Code Analysis (SonarQube)') {
         steps {
            echo '${STAGE_NAME}'
           } // steps
         } // stage
       } // parallel
    } // stage
    
    stage('Compile / Build / Package Application (Maven)') {
      steps {
          container('maven') {
            sh '''
                which mvn
            '''
          }
      } // steps
    } // stage

    stage('Run Unit Tests (Junit)') {
      steps {
        echo '${STAGE_NAME}'
      } // steps
    } // stage

    stage('Push Artifacts to Repository with Metadata') {
      steps {
        echo '${STAGE_NAME}'
      } // steps
    } // stage

    stage('Compose Container') {
      steps {
        echo '${STAGE_NAME}'
        } // steps
      } // stage

    stage('Push New Container Image with Metadata') {
      steps {
        echo '${STAGE_NAME}'
      } // steps
    } // stage    

    stage('Image Unit Testing (TBD)') {
      steps {
        echo '${STAGE_NAME}'
      } // steps
    } // stage   

    stage('Static Image Scans') {

      parallel {
        stage('Static Compliance Image Scan (OpenSCAP)') {
          steps {
            echo '${STAGE_NAME}'
          } // steps
        } // stage

       stage('Static Vulnerability Image Scan (OpenSCAP)') {
         steps {
           echo '${STAGE_NAME}'
         } // steps
       } // stage
      } // parallel
    } // stage

    stage('Push Trusted Container Image with Metadata') {
      steps {
        echo '${STAGE_NAME}'
      } // steps
    } // stage

    stage('Trigger Deployment') {
      steps {
        echo '${STAGE_NAME} - if master branch trigger prod deployment else trigger non-prod deployment'
      } // steps
    } // stage

  } //stages

} // pipeline
